import requests

# Define API key
api_key = 'MY_API_KEY'

# Set up the URL for the Alpha Vantage API request to fetch daily time series data
url = f'https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=AFX.DEX&outputsize=full&apikey={api_key}'

# Make the GET request to the Alpha Vantage API
r = requests.get(url)

# Check if the request was successful
if r.status_code == 200:
    # Parse the JSON response into a Python dictionary
    data = r.json()

    # Debug: Print the keys of the JSON response
    print("JSON Response Keys:", data.keys())

    # Check for errors in the response
    if 'Error Message' in data:
        print("Error:", data['Error Message'])
    elif 'Note' in data:
        print("Note:", data['Note'])


    # Alpha Vantage's structure for daily time series data
    time_series = data.get('Time Series (Daily)', {})

    # Debug: Print the number of entries in the time series
    print("Number of Time Series Entries:", len(time_series))

    # Debug: Print the first few dates to verify format
    print("Sample Dates:", list(time_series.keys())[:5])
    
    # Initialize variables for calculations
    max_open = float('-inf')
    min_open = float('inf')
    max_change_in_one_day = float('-inf')
    prev_close = None
    max_change_between_days = float('-inf')
    total_volume = 0
    volume_list = []

    # Loop through the dataset to perform the required analysis
    for date, daily_data in time_series.items():
        # Filter dates for the year 2017
        if not date.startswith('2017-'):
            continue
        
        # Debug: Print daily data to ensure the data format is correct
        print(f"Processing Date: {date}, Data: {daily_data}")

        # Extract the relevant data points
        open_price = float(daily_data['1. open']) if daily_data['1. open'] else None
        high = float(daily_data['2. high']) if daily_data['2. high'] else None
        low = float(daily_data['3. low']) if daily_data['3. low'] else None
        close = float(daily_data['4. close']) if daily_data['4. close'] else None
        traded_volume = float(daily_data['5. volume']) if daily_data['5. volume'] else 0.0
        
        # Calculate highest and lowest opening prices
        if open_price is not None:
            max_open = max(max_open, open_price)
            min_open = min(min_open, open_price)
        
        # Calculate the largest change in one day (High - Low)
        if high is not None and low is not None:
            daily_change = high - low
            max_change_in_one_day = max(max_change_in_one_day, daily_change)
        
        # Calculate the largest change between two days (based on Closing Price)
        if prev_close is not None and close is not None:
            close_change = abs(close - prev_close)
            max_change_between_days = max(max_change_between_days, close_change)
        
        # Set the previous close for the next iteration
        if close is not None:
            prev_close = close
        
        # Sum up the trading volume
        if traded_volume is not None:
            total_volume += traded_volume
            volume_list.append(traded_volume)
    
    # Calculate the average daily trading volume
    if len(volume_list) > 0:
        average_volume = total_volume / len(volume_list)
    else:
        average_volume = 0
    
    # Custom function to calculate the median
    def calculate_median(volumes):
        volumes.sort()
        n = len(volumes)
        mid = n // 2
        if n % 2 == 0:
            return (volumes[mid - 1] + volumes[mid]) / 2
        else:
            return volumes[mid]
    
    # Calculate the median trading volume
    median_volume = calculate_median(volume_list) if volume_list else 0
    
    # Print results
    print(f"Highest Opening Price: {max_open}")
    print(f"Lowest Opening Price: {min_open}")
    print(f"Largest Change in One Day (High - Low): {max_change_in_one_day}")
    print(f"Largest Change Between Two Days (Closing Price): {max_change_between_days}")
    print(f"Average Daily Trading Volume: {average_volume}")
    print(f"Median Daily Trading Volume: {median_volume}")
    
else:
    print(f"Failed to fetch data: {r.status_code}")
    print(r.text)

#Result:
#Highest Opening Price: 53.11
#Lowest Opening Price: 34.0
#Largest Change in One Day (High - Low): 2.8100000000000023
#Largest Change Between Two Days (Closing Price): 2.5549999999999997
#Average Daily Trading Volume: 92684.38492063493
#Median Daily Trading Volume: 78178.0
