import requests
import os
from dotenv import load_dotenv
import json
# Load API key from .env file
load_dotenv()
API_KEY = os.getenv('#Removed#')
# Set the base URL for the API endpoint
base_url = "https://data.nasdaq.com/api/v3/datasets/FSE/AFX_X.json"
# Set the parameters for the API request
params = {
    'start_date': '2017-01-01',  # Start date for 2017
    'end_date': '2017-12-31',    # End date for 2017
    'api_key': API_KEY
}
# Make the API request
response = requests.get(base_url, params=params)
# Check if the request was successful
if response.status_code == 200:
    # Parse the JSON response into a Python dictionary
    data = response.json()
    # Extract the dataset data
    dataset = data['dataset']['data']
    # Initialize variables
    max_open = float('-inf')
    min_open = float('inf')
    max_change = float('-inf')
    prev_close = None
    max_close_change = float('-inf')
    total_volume = 0
    volume_list = []
    # Loop through dataset entries
    for entry in dataset:
        # Unpack the data entries, handling possible None values
        date, open_price, high, low, close, change, traded_volume = (
            entry[0],
            float(entry[1]) if entry[1] is not None else None,
            float(entry[2]) if entry[2] is not None else None,
            float(entry[3]) if entry[3] is not None else None,
            float(entry[4]) if entry[4] is not None else None,
            float(entry[5]) if entry[5] is not None else None,
            float(entry[6]) if entry[6] is not None else None
        )
        # Calculate the highest and lowest opening prices
        if open_price is not None:
            max_open = max(max_open, open_price)
            min_open = min(min_open, open_price)
        # Calculate the largest change in one day (High - Low)
        if high is not None and low is not None:
            daily_change = high - low
            max_change = max(max_change, daily_change)
        # Calculate the largest change between any two days (based on Closing Price)
        if prev_close is not None and close is not None:
            close_change = abs(close - prev_close)
            max_close_change = max(max_close_change, close_change)
        # Set the previous close for next iteration
        prev_close = close
        # Sum up the trading volume
        if traded_volume is not None:
            total_volume += traded_volume
            volume_list.append(traded_volume)
    # Calculate the average daily trading volume
    average_volume = total_volume / len(dataset)
    # Custom function to calculate median
    def calculate_median(volumes):
        volumes.sort()
        n = len(volumes)
        mid = n // 2
        if n % 2 == 0:
            return (volumes[mid - 1] + volumes[mid]) / 2
        else:
            return volumes[mid]
    # Calculate the median trading volume
    median_volume = calculate_median(volume_list)
    # Print results
    print(f"Highest Opening Price: {max_open}")
    print(f"Lowest Opening Price: {min_open}")
    print(f"Largest Change in One Day (High-Low): {max_change}")
    print(f"Largest Change Between Two Days (Closing Price): {max_close_change}")
    print(f"Average Daily Trading Volume: {average_volume}")
    print(f"Median Daily Trading Volume: {median_volume}")
Highest Opening Price: 34.99
Lowest Opening Price: 34.99
Largest Change in One Day (High-Low): 0.9499999999999957
Largest Change Between Two Days (Closing Price): -inf
Average Daily Trading Volume: 175.2941176470588
Median Daily Trading Volume: 44700.0
response = requests.get(base_url, params=params)

if response.status_code == 200:
    print("Request was successful.")
else:
    print("Failed to fetch data:", response.status_code, response.text)
